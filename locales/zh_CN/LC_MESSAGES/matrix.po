# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-13 16:43+0800\n"
"PO-Revision-Date: 2020-08-03 18:40+0800\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../matrix.rst:4
msgid "Matrices"
msgstr "矩阵"

#: ../../matrix.rst:6
#, fuzzy
msgid ""
"``ti.Matrix`` is for small matrices (e.g. `3x3`) only. If you have "
"`64x64` matrices, you should consider using a 2D scalar field."
msgstr "``ti.Matrix`` 只适用于小矩阵（如3x3）。如果要使用 `64x64` 的矩阵，你可以用标量构成的二维张量。"

#: ../../matrix.rst:7
msgid ""
"``ti.Vector`` is the same as ``ti.Matrix``, except that it has only one "
"column."
msgstr "``ti.Vector`` 和 ``ti.Matrix`` 相同，只不过它只有一列。"

#: ../../matrix.rst:8
msgid "Differentiate element-wise product ``*`` and matrix product ``@``."
msgstr "注意区分逐元素的乘法 ``*`` 和矩阵乘法 ``@`` 。"

#: ../../matrix.rst:9
#, fuzzy
msgid ""
"``ti.Vector.field(n, dtype=ti.f32)`` or ``ti.Matrix.field(n, m, "
"dtype=ti.f32)`` to create vector/matrix fields."
msgstr ""
"``ti.Vector(n, dt=ti.f32)`` 或 ``ti.Matrix(n, m, dt=ti.f32)`` "
"用来创建向量/矩阵构成的张量。"

#: ../../matrix.rst:10
msgid "``A.transpose()``"
msgstr "``A.transpose()``"

#: ../../matrix.rst:11
msgid "``R, S = ti.polar_decompose(A, ti.f32)``"
msgstr "``R, S = ti.polar_decompose(A, ti.f32)``"

#: ../../matrix.rst:12
msgid ""
"``U, sigma, V = ti.svd(A, ti.f32)`` (Note that ``sigma`` is a ``3x3`` "
"diagonal matrix)"
msgstr "``U, sigma, V = ti.svd(A, ti.f32)`` （其中 ``sigma`` 是一个 ``3x3`` 矩阵）"

#: ../../matrix.rst:13
msgid "``any(A)`` (Taichi-scope only)"
msgstr "``any(A)``（仅 Taichi 作用域）"

#: ../../matrix.rst:14
msgid "``all(A)`` (Taichi-scope only)"
msgstr "``all(A)``（仅 Taichi 作用域）"

#: ../../matrix.rst:16
msgid "TODO: doc here better like Vector. WIP"
msgstr ""

#: ../../matrix.rst:18
msgid "A matrix in Taichi can have two forms:"
msgstr "Taichi中的矩阵有两种形式："

#: ../../matrix.rst:20
msgid ""
"as a temporary local variable. An ``n by m`` matrix consists of ``n * m``"
" scalar values."
msgstr "作为临时局部变量。一个由 ``n*m`` 个标量构成的 ``n×m`` 阶矩阵。"

#: ../../matrix.rst:21
#, fuzzy
msgid ""
"as a an element of a global field. In this case, the field is an "
"N-dimensional array of ``n by m`` matrices."
msgstr "作为全局张量的一个成员。在这种情况下， 张量是一个由 ``n×m`` 阶矩阵构成的N-维的数组。"

#: ../../matrix.rst:24
msgid "Declaration"
msgstr "定义"

#: ../../matrix.rst:27 ../../matrix.rst:94
#, fuzzy
msgid "As global matrix fields"
msgstr "作为全局张量的矩阵"

#: ../../matrix.rst
msgid "Parameters"
msgstr "变量"

#: ../../matrix.rst:31
msgid "(scalar) the number of rows in the matrix"
msgstr "（标量）矩阵的行数"

#: ../../matrix.rst:32
msgid "(scalar) the number of columns in the matrix"
msgstr "（标量）矩阵的列数"

#: ../../matrix.rst:33
msgid "(DataType) data type of the components"
msgstr "（数据类型）元素的数据类型"

#: ../../matrix.rst:34
#, fuzzy
msgid "(optional, scalar or tuple) shape of the matrix field, see :ref:`tensor`"
msgstr "（可选，标量或元组）向量张量的形状，见 :ref:`tensor`"

#: ../../matrix.rst:35
msgid "(optional, scalar or tuple) see :ref:`offset`"
msgstr "（可选，标量或元组）请参见 :ref:`offset`"

#: ../../matrix.rst:37
#, fuzzy
msgid ""
"For example, this creates a 5x4 matrix field with each entry being a 3x3 "
"matrix: ::"
msgstr "例如， 以下创建了一个由 3x3 矩阵构成的 5x4 的张量： ::"

#: ../../matrix.rst:40
#, fuzzy
msgid ""
"# Python-scope\n"
"a = ti.Matrix.field(3, 3, dtype=ti.f32, shape=(5, 4))"
msgstr ""
"# Python-scope\n"
"a = ti.Matrix.var(3, 3, dt=ti.f32, shape=(5, 4))"

#: ../../matrix.rst:45
#, fuzzy
msgid ""
"In Python-scope, ``ti.field`` declares a :ref:`scalar_tensor`, while "
"``ti.Matrix.field`` declares a matrix field."
msgstr ""
"在 Python-scope 中， ``ti.var`` 声明了 :ref:`scalar_tensor` , ``ti.Matrix`` "
"声明了由矩阵组成的张量。"

#: ../../matrix.rst:49 ../../matrix.rst:124
msgid "As a temporary local variable"
msgstr "作为一个临时的本地变量"

#: ../../matrix.rst:53
msgid "(scalar) the first component of the first row"
msgstr "（标量）第一行第一个元素"

#: ../../matrix.rst:54
msgid "(scalar) the second component of the first row"
msgstr "（标量）第一行第二个元素"

#: ../../matrix.rst:55
msgid "(scalar) the first component of the second row"
msgstr "（标量）第二行第一个元素"

#: ../../matrix.rst:56
msgid "(scalar) the second component of the second row"
msgstr "（标量）第二行第二个元素"

#: ../../matrix.rst:58
msgid ""
"For example, this creates a 2x3 matrix with components (2, 3, 4) in the "
"first row and (5, 6, 7) in the second row: ::"
msgstr "例如，下述将创建一个 2x3 的矩阵，第一行中的分量为 (2, 3, 4) ，第二行的为 (5, 6, 7) 中： ::"

#: ../../matrix.rst:61
msgid ""
"# Taichi-scope\n"
"a = ti.Matrix([[2, 3, 4], [5, 6, 7]])"
msgstr ""
"# Taichi-scope\n"
"a = ti.Matrix([[2, 3, 4], [5, 6, 7]])"

#: ../../matrix.rst:68
msgid "(vector) vector of elements forming first row (or column)"
msgstr "（向量）组成第一行（列）元素的向量"

#: ../../matrix.rst:69
msgid "(vector) vector of elements forming second row (or column)"
msgstr "（向量）组成第二行（列）元素的向量"

#: ../../matrix.rst:70
msgid "(vector) vector of elements forming third row (or column)"
msgstr "（向量）组成第三行（列）元素的向量"

#: ../../matrix.rst:72
msgid ""
"For example, this creates a 3x3 matrix by concactinating vectors into "
"rows (or columns): ::"
msgstr "例如，以下代码创建了一个 3x3 矩阵，矩阵的行（列）是由向量拼接构成的： ::"

#: ../../matrix.rst:75
msgid ""
"# Taichi-scope\n"
"v0 = ti.Vector([1.0, 2.0, 3.0])\n"
"v1 = ti.Vector([4.0, 5.0, 6.0])\n"
"v2 = ti.Vector([7.0, 8.0, 9.0])\n"
"\n"
"# to specify data in rows\n"
"a = ti.Matrix.rows([v0, v1, v2])\n"
"\n"
"# to specify data in columns instead\n"
"a = ti.Matrix.cols([v0, v1, v2])\n"
"\n"
"# lists can be used instead of vectors\n"
"a = ti.Matrix.rows([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])"
msgstr ""
"# Taichi 作用域\n"
"v0 = ti.Vector([1.0, 2.0, 3.0])\n"
"v1 = ti.Vector([4.0, 5.0, 6.0])\n"
"v2 = ti.Vector([7.0, 8.0, 9.0])\n"
"\n"
"# 指定行中的数据\n"
"a = ti.Matrix.rows([v0, v1, v2])\n"
"\n"
"# 指定列中的数据\n"
"a = ti.Matrix.cols([v0, v1, v2])\n"
"\n"
"# 可以用列表代替参数中的向量\n"
"a = ti.Matrix.rows([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])"

#: ../../matrix.rst:91
msgid "Accessing components"
msgstr "元素访问"

#: ../../matrix.rst:97
#, fuzzy
msgid "(ti.Matrix.field) the matrix field"
msgstr "（矩阵）该矩阵本身"

#: ../../matrix.rst:98
#, fuzzy
msgid "(scalar) index of the first field dimension"
msgstr "（标量）张量的第一维的索引"

#: ../../matrix.rst:99
#, fuzzy
msgid "(scalar) index of the second field dimension"
msgstr "（标量）张量的第二维的索引"

#: ../../matrix.rst:100 ../../matrix.rst:129
msgid "(scalar) row index of the matrix"
msgstr "（标量）矩阵的行索引"

#: ../../matrix.rst:101 ../../matrix.rst:130
msgid "(scalar) column index of the matrix"
msgstr "（标量）矩阵的列索引"

#: ../../matrix.rst:103
msgid "This extracts the first element in matrix ``a[6, 3]``: ::"
msgstr "以下代码用以访问矩阵 ``a[6,3]`` 的第一个元素： ::"

#: ../../matrix.rst:106
msgid ""
"x = a[6, 3][0, 0]\n"
"\n"
"# or\n"
"mat = a[6, 3]\n"
"x = mat[0, 0]"
msgstr ""
"x = a[6, 3][0, 0]\n"
"\n"
"# 或者\n"
"mat = a[6, 3]\n"
"x = mat[0, 0]"

#: ../../matrix.rst:114
#, fuzzy
msgid ""
"**Always** use two pair of square brackets to access scalar elements from"
" matrix fields."
msgstr "访问矩阵形式张量中的标量元素时， **必须** 使用两对方括号。"

#: ../../matrix.rst:116
#, fuzzy
msgid ""
"The indices in the first pair of brackets locate the matrix inside the "
"matrix fields;"
msgstr "第一对方括号中的索引定位张量中的矩阵;"

#: ../../matrix.rst:117
msgid ""
"The indices in the second pair of brackets locate the scalar element "
"inside the matrix."
msgstr "第二对方括号中的索引定位矩阵中的标量元素。"

#: ../../matrix.rst:119
#, fuzzy
msgid ""
"For 0-D matrix fields, indices in the first pair of brackets should be "
"``[None]``."
msgstr "对于0维的矩阵形式的张量，第一对方括号中的索引应该为 ``[None]`` 。"

#: ../../matrix.rst:128
msgid "(Matrix) the matrix"
msgstr "（矩阵）该矩阵本身"

#: ../../matrix.rst:132
msgid ""
"For example, this extracts the element in row 0 column 1 of matrix ``a``:"
" ::"
msgstr "比如，访问矩阵 ``a`` 第0行第1列的元素： ::"

#: ../../matrix.rst:135
msgid "x = a[0, 1]"
msgstr "x = a[0, 1]"

#: ../../matrix.rst:137
msgid "This sets the element in row 1 column 3 of ``a`` to 4: ::"
msgstr "将 ``a`` 第1行第3列的元素设置为4： ::"

#: ../../matrix.rst:140
msgid "a[1, 3] = 4"
msgstr "a[1, 3] = 4"

#: ../../matrix.rst:143
msgid "Methods"
msgstr "方法"

#: ../../matrix.rst:147 ../../matrix.rst:163 ../../matrix.rst:171
#: ../../matrix.rst:183
#, fuzzy
msgid "(ti.Matrix) the matrix"
msgstr "（矩阵）该矩阵本身"

#: ../../matrix.rst
msgid "Returns"
msgstr "返回"

#: ../../matrix.rst:148
#, fuzzy
msgid "(ti.Matrix) the transposed matrix of ``a``."
msgstr "（矩阵） ``a`` 的转置矩阵 。"

#: ../../matrix.rst:150
msgid "For example::"
msgstr "例如："

#: ../../matrix.rst:152
msgid ""
"a = ti.Matrix([[2, 3], [4, 5]])\n"
"b = a.transpose()\n"
"# Now b = ti.Matrix([[2, 4], [3, 5]])"
msgstr ""
"a = ti.Matrix([[2, 3], [4, 5]])\n"
"b = a.transpose()\n"
"# 现在 b = ti.Matrix([[2, 4], [3, 5]])"

#: ../../matrix.rst:158
msgid ""
"``a.transpose()`` will not effect the data in ``a``, it just return the "
"result."
msgstr "``a.transpose()`` 不会影响 ``a`` 中的数据，它只是返回结果。"

#: ../../matrix.rst:164
msgid "(scalar) the trace of matrix ``a``."
msgstr "（标量） ``a`` 矩阵的迹。"

#: ../../matrix.rst:166
msgid "The return value can be computed as ``a[0, 0] + a[1, 1] + ...``."
msgstr "返回值可以计算为 ``a[0, 0] + a[1, 1] + ...`` 。"

#: ../../matrix.rst:172
msgid "(scalar) the determinant of matrix ``a``."
msgstr "（标量） ``a`` 矩阵的行列式。"

#: ../../matrix.rst:176 ../../matrix.rst:188
msgid "The matrix size of matrix must be 1x1, 2x2, 3x3 or 4x4 for now."
msgstr "目前用于此函数的矩阵大小必须为 1x1、2x2、3x3 或 4x4。"

#: ../../matrix.rst:178 ../../matrix.rst:190
msgid "This function only works in Taichi-scope for now."
msgstr "此函数目前仅在 Taichi 作用域内有效。"

#: ../../matrix.rst:184
#, fuzzy
msgid "(ti.Matrix) the inverse of matrix ``a``."
msgstr "（矩阵） ``a`` 的逆矩阵。"

#~ msgid "``ti.transposed(A)`` or simply ``A.T()``"
#~ msgstr "``ti.transposed(A)`` 或简单的 ``A.T()``"

#~ msgid ""
#~ "``ti.cross(a, b)``, where ``a`` and "
#~ "``b`` are 3D vectors (i.e. ``3x1`` "
#~ "matrices)"
#~ msgstr "``ti.cross(a, b)`` , 其中， ``a`` 和 ``b`` 是3维向量（例如， ``3x1`` 的矩阵）"

#~ msgid "(scalar) the first component of the vector"
#~ msgstr "（标量）向量的第一个元素"

#~ msgid "(scalar) the second component of the vector"
#~ msgstr "（标量）向量的第二个元素"

#~ msgid "For example, this creates a 3x1 matrix with components (2, 3, 4): ::"
#~ msgstr "比如，创建一个元素为 (2, 3, 4) 的 3x1 阶矩阵: ::"

#~ msgid "this is equivalent to ti.Vector([x, y, ...])"
#~ msgstr "等价于 ti.Vector([x, y, ...])"

#~ msgid "As global tensors of vectors"
#~ msgstr "作为全局的由向量构成的张量"

#~ msgid "(tensor of matrices) the tensor of matrices"
#~ msgstr "（矩阵构成的张量）张量名"

