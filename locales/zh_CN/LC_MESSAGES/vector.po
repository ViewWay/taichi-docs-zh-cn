# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Yuanming Hu
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.5.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-15 13:41+0800\n"
"PO-Revision-Date: 2020-08-09 20:00+0800\n"
"Last-Translator: \n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../vector.rst:4
msgid "Vectors"
msgstr "向量"

#: ../../vector.rst:6
msgid "A vector in Taichi can have two forms:"
msgstr "在 Taichi 中，向量有两种表述形式："

#: ../../vector.rst:8
msgid ""
"as a temporary local variable. An ``n`` component vector consists of "
"``n`` scalar values."
msgstr "作为临时局部变量，一个由 ``n`` 个标量组成的 ``n`` 分量向量。"

#: ../../vector.rst:9
#, fuzzy
msgid ""
"as an element of a global field. In this case, the field is an "
"N-dimensional array of ``n`` component vectors."
msgstr "作为全局张量(global tensor)的构成元素。比如，一个由 ``n`` 分量向量组成的N-维数组构成的全局张量。"

#: ../../vector.rst:11
msgid ""
"In fact, ``Vector`` is simply an alias of ``Matrix``, just with ``m = "
"1``. See :ref:`matrix` and :ref:`tensor` for more details."
msgstr ""
"事实上，``向量`` 是 ``矩阵`` 的一个别名， 只不过向量的 ``m = 1`` (m 代指列）。 请参阅 :ref:`matrix` 和 "
":ref:`tensor` 以获得更多信息。"

#: ../../vector.rst:14
msgid "Declaration"
msgstr "声明向量"

#: ../../vector.rst:17 ../../vector.rst:56
#, fuzzy
msgid "As global vector fields"
msgstr "全局张量中的向量"

#: ../../vector.rst
msgid "Parameters"
msgstr "参数"

#: ../../vector.rst:21
msgid "(scalar) the number of components in the vector"
msgstr "（标量) 向量中的分量数目"

#: ../../vector.rst:22
msgid "(DataType) data type of the components"
msgstr "（数据类型) 分量的数据类型"

#: ../../vector.rst:23
#, fuzzy
msgid "(optional, scalar or tuple) shape of the vector field, see :ref:`tensor`"
msgstr "（可选，标量或元组）张量的形状（其中的元素是向量）, 请参阅 :ref:`tensor`"

#: ../../vector.rst:24
msgid "(optional, scalar or tuple) see :ref:`offset`"
msgstr "（可选，标量或元组）请参阅 :ref:`offset`"

#: ../../vector.rst:26
#, fuzzy
msgid "For example, this creates a 3-D vector field of the shape of ``5x4``: ::"
msgstr "例如, 我们可以使用 (2, 3, 4)创建一个三维向量: ::"

#: ../../vector.rst:29
#, fuzzy
msgid ""
"# Python-scope\n"
"a = ti.Vector.field(3, dtype=ti.f32, shape=(5, 4))"
msgstr ""
"# Python 作用域\n"
"a = ti.Vector.var(3, dt=ti.f32, shape=(5, 4))"

#: ../../vector.rst:34
#, fuzzy
msgid ""
"In Python-scope, ``ti.field`` declares :ref:`scalar_tensor`, while "
"``ti.Vector.field`` declares vector fields."
msgstr ""
"在 Python 作用域中, ``ti.var`` 声明 :ref:`scalar_tensor`, 而 ``ti.Vector`` "
"声明了由向量构成的张量。"

#: ../../vector.rst:38 ../../vector.rst:85
msgid "As a temporary local variable"
msgstr "临时局部变量向量"

#: ../../vector.rst:42
msgid "(scalar) the first component of the vector"
msgstr "（标量）向量的第一个分量"

#: ../../vector.rst:43
msgid "(scalar) the second component of the vector"
msgstr "（标量）向量的第二个分量"

#: ../../vector.rst:45
msgid "For example, this creates a 3D vector with components (2, 3, 4): ::"
msgstr "例如, 我们可以使用 (2, 3, 4)创建一个三维向量: ::"

#: ../../vector.rst:48
msgid ""
"# Taichi-scope\n"
"a = ti.Vector([2, 3, 4])"
msgstr ""
"# Taichi 作用域\n"
"a = ti.Vector([2, 3, 4])"

#: ../../vector.rst:53
msgid "Accessing components"
msgstr "访问向量的分量"

#: ../../vector.rst:59
#, fuzzy
msgid "(ti.Vector.field) the vector"
msgstr "（向量）向量"

#: ../../vector.rst:60
#, fuzzy
msgid "(scalar) index of the first field dimension"
msgstr "（标量) 张量的行索引"

#: ../../vector.rst:61
#, fuzzy
msgid "(scalar) index of the second field dimension"
msgstr "（标量) 张量的列索引"

#: ../../vector.rst:62
msgid "(scalar) index of the vector component"
msgstr "（标量) 向量内分量的索引"

#: ../../vector.rst:64
msgid "This extracts the first component of vector ``a[6, 3]``: ::"
msgstr "这里提取出了向量 ``a[6, 3]`` 的第一个分量: ::"

#: ../../vector.rst:67
msgid ""
"x = a[6, 3][0]\n"
"\n"
"# or\n"
"vec = a[6, 3]\n"
"x = vec[0]"
msgstr ""
"x = a[6, 3][0]\n"
"\n"
"# 或者\n"
"vec = a[6, 3]\n"
"x = vec[0]"

#: ../../vector.rst:75
#, fuzzy
msgid ""
"**Always** use two pairs of square brackets to access scalar elements "
"from vector fields."
msgstr "**始终** 使用两组方括号来访问张量中向量里的标量元素。"

#: ../../vector.rst:77
#, fuzzy
msgid ""
"The indices in the first pair of brackets locate the vector inside the "
"vector fields;"
msgstr "第一组方括号负责定位张量中的向量;"

#: ../../vector.rst:78
msgid ""
"The indices in the second pair of brackets locate the scalar element "
"inside the vector."
msgstr "第二组方括号负责定位向量中的标量。"

#: ../../vector.rst:80
#, fuzzy
msgid ""
"For 0-D vector fields, indices in the first pair of brackets should be "
"``[None]``."
msgstr "特别的，对0维张量第一组方括号应该使用 ``[None]`` 。"

#: ../../vector.rst:89
msgid "(Vector) the vector"
msgstr "（向量）向量"

#: ../../vector.rst:90
msgid "(scalar) index of the component"
msgstr "指定访问下标"

#: ../../vector.rst:92
msgid "For example, this extracts the first component of vector ``a``: ::"
msgstr "例如，这里我们提取出了向量 ``a`` 的第一个分量: ::"

#: ../../vector.rst:95
msgid "x = a[0]"
msgstr ""

#: ../../vector.rst:97
msgid "This sets the second component of ``a`` to 4: ::"
msgstr "同理，将 ``a`` 的第二个分量设置为 4: ::"

#: ../../vector.rst:100
msgid "a[1] = 4"
msgstr ""

#: ../../vector.rst:102
msgid "TODO: add descriptions about ``a(i, j)``"
msgstr ""

#: ../../vector.rst:105
msgid "Methods"
msgstr "相关方法"

#: ../../vector.rst:109 ../../vector.rst:127 ../../vector.rst:141
#: ../../vector.rst:155 ../../vector.rst:156 ../../vector.rst:189
#: ../../vector.rst:190 ../../vector.rst:207
#, fuzzy
msgid "(ti.Vector)"
msgstr "（向量）"

#: ../../vector.rst:110
msgid ""
"(optional, scalar) a safe-guard value for ``sqrt``, usually 0. See the "
"note below."
msgstr "（可选，标量） ``sqrt`` 的安全保护值，通常为0。详见下面注解。"

#: ../../vector.rst
msgid "Returns"
msgstr "返回"

#: ../../vector.rst:111
msgid "(scalar) the magnitude / length / norm of vector"
msgstr "（标量）向量的大小、长度、范数"

#: ../../vector.rst:113 ../../vector.rst:130 ../../vector.rst:144
msgid "For example, ::"
msgstr "例如: ::"

#: ../../vector.rst:116
msgid ""
"a = ti.Vector([3, 4])\n"
"a.norm() # sqrt(3*3 + 4*4 + 0) = 5"
msgstr ""

#: ../../vector.rst:119
msgid "``a.norm(eps)`` is equivalent to ``ti.sqrt(a.dot(a) + eps)``"
msgstr "``a.norm(eps)`` 相当于 ``ti.sqrt(a.dot(a) + eps)``"

#: ../../vector.rst:122
#, fuzzy
msgid ""
"To safeguard the operator's gradient on zero vectors during "
"differentiable programming, set ``eps`` to a small, positive value such "
"as ``1e-5``."
msgstr "例如可以通过设置 ``eps = 1e-5`` ，对可微编程中零向量上的梯度值计算进行保护。"

#: ../../vector.rst:128
msgid "(scalar) the square of the magnitude / length / norm of vector"
msgstr "（标量）向量的大小、长度、范数的平方"

#: ../../vector.rst:133
msgid ""
"a = ti.Vector([3, 4])\n"
"a.norm_sqr() # 3*3 + 4*4 = 25"
msgstr ""

#: ../../vector.rst:136
msgid "``a.norm_sqr()`` is equivalent to ``a.dot(a)``"
msgstr "``a.norm_sqr()`` 相当于 ``a.dot(a)``"

#: ../../vector.rst:142
#, fuzzy
msgid "(ti.Vector) the normalized / unit vector of ``a``"
msgstr "（向量）向量 ``a`` 的标准化/单位向量"

#: ../../vector.rst:147
msgid ""
"a = ti.Vector([3, 4])\n"
"a.normalized() # [3 / 5, 4 / 5]"
msgstr ""

#: ../../vector.rst:150
msgid "``a.normalized()`` is equivalent to ``a / a.norm()``."
msgstr "``a.normalized()`` 相当于 ``a / a.norm()``。"

#: ../../vector.rst:157
msgid "(scalar) the dot (inner) product of ``a`` and ``b``"
msgstr "（标量） ``a`` 和 ``b`` 之间点乘（内积）的结果"

#: ../../vector.rst:159 ../../vector.rst:193 ../../vector.rst:211
#: ../../vector.rst:230
msgid "E.g., ::"
msgstr "例如: ::"

#: ../../vector.rst:162
msgid ""
"a = ti.Vector([1, 3])\n"
"b = ti.Vector([2, 4])\n"
"a.dot(b) # 1*2 + 3*4 = 14"
msgstr ""

#: ../../vector.rst:169
#, fuzzy
msgid "(ti.Vector, 2 or 3 components)"
msgstr "（向量，2 或 3 分量）"

#: ../../vector.rst:170
#, fuzzy
msgid "(ti.Vector of the same size as a)"
msgstr "（向量，和 a 形状一样）"

#: ../../vector.rst:171
msgid ""
"(scalar (for 2D inputs), or 3D Vector (for 3D inputs)) the cross product "
"of ``a`` and ``b``"
msgstr "标量（对于输入是2维向量），或者3维向量（对于输入是3维向量）这是 ``a`` 和 ``b`` 之间叉乘的结果"

#: ../../vector.rst:173
msgid "We use a right-handed coordinate system. E.g., ::"
msgstr "我们使用的坐标系统是右手系, 例如: ::"

#: ../../vector.rst:176
msgid ""
"a = ti.Vector([1, 2, 3])\n"
"b = ti.Vector([4, 5, 6])\n"
"c = ti.cross(a, b)\n"
"# c = [2*6 - 5*3, 4*3 - 1*6, 1*5 - 4*2] = [-3, 6, -3]\n"
"\n"
"p = ti.Vector([1, 2])\n"
"q = ti.Vector([4, 5])\n"
"r = ti.cross(a, b)\n"
"# r = 1*5 - 4*2 = -3"
msgstr ""

#: ../../vector.rst:191
#, fuzzy
msgid "(ti.Matrix) the outer product of ``a`` and ``b``"
msgstr "（矩阵） ``a`` 和 ``b`` 之间张量积的结果"

#: ../../vector.rst:196
msgid ""
"a = ti.Vector([1, 2])\n"
"b = ti.Vector([4, 5, 6])\n"
"c = ti.outer_product(a, b) # NOTE: c[i, j] = a[i] * b[j]\n"
"# c = [[1*4, 1*5, 1*6], [2*4, 2*5, 2*6]]"
msgstr ""
"a = ti.Vector([1, 2])\n"
"b = ti.Vector([4, 5, 6])\n"
"c = ti.outer_product(a, b) # 注意: c[i, j] = a[i] * b[j]\n"
"# c = [[1*4, 1*5, 1*6], [2*4, 2*5, 2*6]]"

#: ../../vector.rst:202
#, fuzzy
msgid ""
"The outer product should not be confused with the cross product "
"(``ti.cross``). For example, ``a`` and ``b`` do not have to be 2- or "
"3-component vectors for this function."
msgstr "与 `ti.cross` 不同，这里 ``a`` 和 ``b`` 不再要求必须是2分量或3分量的向量。"

#: ../../vector.rst:208
msgid "(DataType)"
msgstr "（数据类型）"

#: ../../vector.rst:209
#, fuzzy
msgid "(ti.Vector) vector with all components of ``a`` casted into type ``dt``"
msgstr "（向量）将向量 ``a`` 中分量的数据类型转化为类型 ``dt``"

#: ../../vector.rst:214
msgid ""
"# Taichi-scope\n"
"a = ti.Vector([1.6, 2.3])\n"
"a.cast(ti.i32) # [2, 3]"
msgstr ""
"# Taichi 作用域\n"
"a = ti.Vector([1.6, 2.3])\n"
"a.cast(ti.i32) # [2, 3]"

#: ../../vector.rst:219
msgid ""
"Vectors are special matrices with only 1 column. In fact, ``ti.Vector`` "
"is just an alias of ``ti.Matrix``."
msgstr "向量是只有一列的特殊矩阵。实际上，``ti.Vector`` 只是 ``ti.Matrix`` 的别名。"

#: ../../vector.rst:223
msgid "Metadata"
msgstr "元数据"

#: ../../vector.rst:227
msgid "(ti.Vector or ti.Vector.field)"
msgstr ""

#: ../../vector.rst:228
msgid ""
"(scalar) return the dimensionality of vector ``a``  E.g., ::      # "
"Taichi-scope     a = ti.Vector([1, 2, 3])     a.n  # 3  ::      # Python-"
"scope     a = ti.Vector.field(3, dtype=ti.f32, shape=())     a.n  # 3"
msgstr ""

#: ../../vector.rst:228
msgid "(scalar) return the dimensionality of vector ``a``"
msgstr "（标量）返回向量 ``a`` 的维度"

#: ../../vector.rst:233
msgid ""
"# Taichi-scope\n"
"a = ti.Vector([1, 2, 3])\n"
"a.n  # 3"
msgstr ""
"# Taichi 作用域\n"
"a = ti.Vector([1, 2, 3])\n"
"a.n  # 3"

#: ../../vector.rst:239
#, fuzzy
msgid ""
"# Python-scope\n"
"a = ti.Vector.field(3, dtype=ti.f32, shape=())\n"
"a.n  # 3"
msgstr ""
"# Python 作用域\n"
" a = ti.Vector.var(3, dt=ti.f32, shape=())\n"
" a.n  # 3"

#: ../../vector.rst:243
msgid "TODO: add element wise operations docs"
msgstr ""

#~ msgid "See :ref:`tensor` for more details."
#~ msgstr "在 :ref:`tensor` 中查看更多细节。"

#~ msgid "For example, this creates a 5x4 tensor of 3 component vectors: ::"
#~ msgstr "例如, 这里我们创建了一个5x4的张量，张量中的元素都是3维的向量: ::"

#~ msgid "(tensor of Vector) the vector"
#~ msgstr "（向量张量）"

#~ msgid "(Vector or tensor of Vector)"
#~ msgstr "（向量或向量张量）"

#~ msgid ""
#~ "(scalar) return the dimensionality of "
#~ "vector ``a``  E.g., ::      # Taichi-"
#~ "scope     a = ti.Vector([1, 2, 3])"
#~ "     a.n  # 3  ::     # Python-"
#~ "scope     a = ti.Vector.var(3, dt=ti.f32, "
#~ "shape=())     a.n  # 3"
#~ msgstr ""

#~ msgid "::"
#~ msgstr ""

