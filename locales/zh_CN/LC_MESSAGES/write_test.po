# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Taichi Developers
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.6.24\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-13 16:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../write_test.rst:2
msgid "Workflow for writing a Python test"
msgstr ""

#: ../../write_test.rst:4
msgid "Normally we write functional tests in Python."
msgstr ""

#: ../../write_test.rst:6
msgid ""
"We use `pytest <https://github.com/pytest-dev/pytest>`_ for our Python "
"test infrastructure."
msgstr ""

#: ../../write_test.rst:7
msgid "Python tests should be added to ``tests/python/test_xxx.py``."
msgstr ""

#: ../../write_test.rst:9
msgid ""
"For example, you've just added a utility function ``ti.log10``. Now you "
"want to write a **test**, to test if it functions properly."
msgstr ""

#: ../../write_test.rst:13
msgid "Adding a new test case"
msgstr ""

#: ../../write_test.rst:15
msgid ""
"Look into ``tests/python``, see if there's already a file suit for your "
"test. If not, feel free to create a new file for it :) So in this case "
"let's create a new file ``tests/python/test_logarithm.py`` for "
"simplicity."
msgstr ""

#: ../../write_test.rst:19
msgid ""
"Add a function, the function name **must** be started with ``test_`` so "
"that ``pytest`` could find it. e.g:"
msgstr ""

#: ../../write_test.rst:21
msgid ""
"import taichi as ti\n"
"\n"
"def test_log10():\n"
"    pass"
msgstr ""

#: ../../write_test.rst:28
msgid ""
"Add some simple code make use of our ``ti.log10`` to make sure it works "
"well. Hint: You may pass/return values to/from Taichi-scope using 0-D "
"fields, i.e. ``r[None]``."
msgstr ""

#: ../../write_test.rst:31
msgid ""
"import taichi as ti\n"
"\n"
"def test_log10():\n"
"    ti.init(arch=ti.cpu)\n"
"\n"
"    r = ti.var(ti.f32, ())\n"
"\n"
"    @ti.kernel\n"
"    def foo():\n"
"        r[None] = ti.log10(r[None])\n"
"\n"
"    r[None] = 100\n"
"    foo()\n"
"    assert r[None] == 2"
msgstr ""

#: ../../write_test.rst:48
msgid ""
"Execute ``ti test logarithm``, and the functions starting with ``test_`` "
"in ``tests/python/test_logarithm.py`` will be executed."
msgstr ""

#: ../../write_test.rst:51
msgid "Testing against multiple backends"
msgstr ""

#: ../../write_test.rst:53
msgid ""
"The above method is not good enough, for example, "
"``ti.init(arch=ti.cpu)``, means that it will only test on the CPU "
"backend. So do we have to write many tests ``test_log10_cpu``, "
"``test_log10_cuda``, ... with only the first line different? No worries, "
"we provide a useful decorator ``@ti.test``:"
msgstr ""

#: ../../write_test.rst:57
msgid ""
"import taichi as ti\n"
"\n"
"# will test against both CPU and CUDA backends\n"
"@ti.test(ti.cpu, ti.cuda)\n"
"def test_log10():\n"
"    r = ti.var(ti.f32, ())\n"
"\n"
"    @ti.kernel\n"
"    def foo():\n"
"        r[None] = ti.log10(r[None])\n"
"\n"
"    r[None] = 100\n"
"    foo()\n"
"    assert r[None] == 2"
msgstr ""

#: ../../write_test.rst:74
msgid ""
"And you may test against **all backends** by simply not specifying the "
"argument:"
msgstr ""

#: ../../write_test.rst:76
msgid ""
"import taichi as ti\n"
"\n"
"# will test against all backends available on your end\n"
"@ti.test()\n"
"def test_log10():\n"
"    r = ti.var(ti.f32, ())\n"
"\n"
"    @ti.kernel\n"
"    def foo():\n"
"        r[None] = ti.log10(r[None])\n"
"\n"
"    r[None] = 100\n"
"    foo()\n"
"    assert r[None] == 2"
msgstr ""

#: ../../write_test.rst:93
msgid "Cool! Right? But that's still not good enough."
msgstr ""

#: ../../write_test.rst:96
msgid "Using ``ti.approx`` for comparison with tolerance"
msgstr ""

#: ../../write_test.rst:98
msgid ""
"Sometimes the math percison could be poor on some backends like OpenGL, "
"e.g. ``ti.log10(100)`` may return ``2.001`` or ``1.999`` in this case."
msgstr ""

#: ../../write_test.rst:101
msgid ""
"To cope with this behavior, we provide ``ti.approx`` which can tolerate "
"such errors on different backends, for example ``2.001 == ti.approx(2)`` "
"will return ``True`` on the OpenGL backend."
msgstr ""

#: ../../write_test.rst:104
msgid ""
"import taichi as ti\n"
"\n"
"# will test against all backends available on your end\n"
"@ti.test()\n"
"def test_log10():\n"
"    r = ti.var(ti.f32, ())\n"
"\n"
"    @ti.kernel\n"
"    def foo():\n"
"        r[None] = ti.log10(r[None])\n"
"\n"
"    r[None] = 100\n"
"    foo()\n"
"    assert r[None] == ti.approx(2)"
msgstr ""

#: ../../write_test.rst:123
msgid ""
"Simply using ``pytest.approx`` won't work well here, since it's tolerance"
" won't vary among different Taichi backends. It'll be likely to fail on "
"the OpenGL backend."
msgstr ""

#: ../../write_test.rst:126
msgid ""
"``ti.approx`` also do treatments on boolean types, e.g.: ``2 == "
"ti.approx(True)``."
msgstr ""

#: ../../write_test.rst:128
msgid "Great on improving stability! But the test is still not good enough, yet."
msgstr ""

#: ../../write_test.rst:131
msgid "Parametrize test inputs"
msgstr ""

#: ../../write_test.rst:133
msgid ""
"For example, ``r[None] = 100``, means that it will only test the case of "
"``ti.log10(100)``. What if ``ti.log10(10)``? ``ti.log10(1)``?"
msgstr ""

#: ../../write_test.rst:136
msgid ""
"We may test against different input values using the "
"``@pytest.mark.parametrize`` decorator:"
msgstr ""

#: ../../write_test.rst:138
msgid ""
"import taichi as ti\n"
"import pytest\n"
"import math\n"
"\n"
"@pytest.mark.parametrize('x', [1, 10, 100])\n"
"@ti.test()\n"
"def test_log10(x):\n"
"    r = ti.var(ti.f32, ())\n"
"\n"
"    @ti.kernel\n"
"    def foo():\n"
"        r[None] = ti.log10(r[None])\n"
"\n"
"    r[None] = x\n"
"    foo()\n"
"    assert r[None] == math.log10(x)"
msgstr ""

#: ../../write_test.rst:157
msgid "Use a comma-separated list for multiple input values:"
msgstr ""

#: ../../write_test.rst:159
msgid ""
"import taichi as ti\n"
"import pytest\n"
"import math\n"
"\n"
"@pytest.mark.parametrize('x,y', [(1, 2), (1, 3), (2, 1)])\n"
"@ti.test()\n"
"def test_atan2(x, y):\n"
"    r = ti.var(ti.f32, ())\n"
"    s = ti.var(ti.f32, ())\n"
"\n"
"    @ti.kernel\n"
"    def foo():\n"
"        r[None] = ti.atan2(r[None])\n"
"\n"
"    r[None] = x\n"
"    s[None] = y\n"
"    foo()\n"
"    assert r[None] == math.atan2(x, y)"
msgstr ""

#: ../../write_test.rst:180
msgid ""
"Use two separate ``parametrize`` to test **all combinations** of input "
"arguments:"
msgstr ""

#: ../../write_test.rst:182
msgid ""
"import taichi as ti\n"
"import pytest\n"
"import math\n"
"\n"
"@pytest.mark.parametrize('x', [1, 2])\n"
"@pytest.mark.parametrize('y', [1, 2])\n"
"# same as:  .parametrize('x,y', [(1, 1), (1, 2), (2, 1), (2, 2)])\n"
"@ti.test()\n"
"def test_atan2(x, y):\n"
"    r = ti.var(ti.f32, ())\n"
"    s = ti.var(ti.f32, ())\n"
"\n"
"    @ti.kernel\n"
"    def foo():\n"
"        r[None] = ti.atan2(r[None])\n"
"\n"
"    r[None] = x\n"
"    s[None] = y\n"
"    foo()\n"
"    assert r[None] == math.atan2(x, y)"
msgstr ""

#: ../../write_test.rst:206
msgid "Specifying ``ti.init`` configurations"
msgstr ""

#: ../../write_test.rst:208
msgid "You may specify keyword arguments to ``ti.init()`` in ``ti.test()``, e.g.:"
msgstr ""

#: ../../write_test.rst:210
msgid ""
"@ti.test(ti.cpu, debug=True, log_level=ti.TRACE)\n"
"def test_debugging_utils():\n"
"    # ... (some tests have to be done in debug mode)"
msgstr ""

#: ../../write_test.rst:216
msgid "is the same as:"
msgstr ""

#: ../../write_test.rst:218
msgid ""
"def test_debugging_utils():\n"
"    ti.init(arch=ti.cpu, debug=True, log_level=ti.TRACE)\n"
"    # ... (some tests have to be done in debug mode)"
msgstr ""

#: ../../write_test.rst:225
msgid "Exclude some backends from test"
msgstr ""

#: ../../write_test.rst:227
msgid ""
"Sometimes some backends are not capable of specific tests, we have to "
"exclude them from test:"
msgstr ""

#: ../../write_test.rst:229
msgid ""
"# Run this test on all backends except for OpenGL\n"
"@ti.test(excludes=[ti.opengl])\n"
"def test_sparse_field():\n"
"    # ... (some tests that requires sparse feature which is not supported"
" by OpenGL)"
msgstr ""

#: ../../write_test.rst:236
msgid ""
"You may also use the ``extensions`` keyword to exclude backends without "
"specific feature:"
msgstr ""

#: ../../write_test.rst:238
msgid ""
"# Run this test on all backends except for OpenGL\n"
"@ti.test(extensions=[ti.extension.sparse])\n"
"def test_sparse_field():\n"
"    # ... (some tests that requires sparse feature which is not supported"
" by OpenGL)"
msgstr ""

#~ msgid ""
#~ "Add some simple code make use of"
#~ " our ``ti.log10`` to make sure it "
#~ "works well. Hint: You may pass/return"
#~ " values to/from Taichi-scope using "
#~ "0-D tensors, i.e. ``r[None]``."
#~ msgstr ""

#~ msgid ""
#~ "# Run this test on all backends except for OpenGL\n"
#~ "@ti.test(excludes=[ti.opengl])\n"
#~ "def test_sparse_tensor():\n"
#~ "    # ... (some tests that "
#~ "requires sparse feature which is not "
#~ "supported by OpenGL)"
#~ msgstr ""

#~ msgid ""
#~ "# Run this test on all backends except for OpenGL\n"
#~ "@ti.test(extensions=[ti.extension.sparse])\n"
#~ "def test_sparse_tensor():\n"
#~ "    # ... (some tests that "
#~ "requires sparse feature which is not "
#~ "supported by OpenGL)"
#~ msgstr ""

