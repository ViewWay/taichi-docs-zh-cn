# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Taichi Developers
# This file is distributed under the same license as the taichi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: taichi 0.6.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-13 16:43+0800\n"
"PO-Revision-Date: 2020-08-06 23:11+0800\n"
"Last-Translator: archibate <17721388340@qq.com>\n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../gui.rst:4
msgid "GUI system"
msgstr "GUI系统"

#: ../../gui.rst:6
msgid "Taichi has a built-in GUI system to help users visualize results."
msgstr "Taichi具有内置的GUI系统，可帮助用户可视化结果。"

#: ../../gui.rst:10
msgid "Create a window"
msgstr "创建一个窗口"

#: ../../gui.rst
msgid "Parameters"
msgstr "参量"

#: ../../gui.rst:15
#, fuzzy
msgid "(optional, string) the window title"
msgstr "（字符串）窗口标题"

#: ../../gui.rst:16
#, fuzzy
msgid "(optional, scalar or tuple) resolution / size of the window"
msgstr "（标量或元组）分辨率/窗口大小"

#: ../../gui.rst:17
msgid "(optional, RGB hex) background color of the window"
msgstr "（可选，RGB十六进制）窗口的背景颜色"

#: ../../gui.rst
msgid "Returns"
msgstr "返回"

#: ../../gui.rst:18
msgid "(GUI) an object represents the window"
msgstr "（GUI）对象代表窗口"

#: ../../gui.rst:20
msgid "Create a window. If ``res`` is scalar, then width will be equal to height."
msgstr "创建一个窗口。 如果 ``res`` 是标量，则宽度将等于高度。"

#: ../../gui.rst:23
msgid "The following code creates a window of resolution ``640x360``:"
msgstr "以下代码创建了一个分辨率为 ``640x360`` 的窗口："

#: ../../gui.rst:27
msgid "gui = ti.GUI('Window Title', (640, 360))"
msgstr "gui = ti.GUI('Window Title', (640, 360))"

#: ../../gui.rst:32 ../../gui.rst:55 ../../gui.rst:109 ../../gui.rst:119
#: ../../gui.rst:134 ../../gui.rst:145 ../../gui.rst:156 ../../gui.rst:167
#: ../../gui.rst:178 ../../gui.rst:189
msgid "(GUI) the window object"
msgstr "(GUI)窗口对象"

#: ../../gui.rst:33
msgid "(optional, string) see notes below"
msgstr "（可选，字符串）请参阅以下注释"

#: ../../gui.rst:35
msgid "Show the window on the screen."
msgstr "在屏幕上显示窗口。"

#: ../../gui.rst:38
msgid ""
"If ``filename`` is specified, a screenshot will be saved to the file "
"specified by the name. For example, the following saves frames of the "
"window to ``.png``'s:"
msgstr "如果指定了 ``文件名`` ，则屏幕截图将被保存到该名称指定的文件中。 例如，以下代码会将当前窗口画面保存到 ``.png`` 文件中："

#: ../../gui.rst:43
msgid ""
"for frame in range(10000):\n"
"    render(img)\n"
"    gui.set_image(img)\n"
"    gui.show(f'{frame:06d}.png')"
msgstr ""
"for frame in range(10000):\n"
"    render(img)\n"
"    gui.set_image(img)\n"
"    gui.show(f'{frame:06d}.png')"

#: ../../gui.rst:50
msgid "Paint on a window"
msgstr "在窗口上作画"

#: ../../gui.rst:56
#, fuzzy
msgid "(np.array or ti.field) field containing the image, see notes below"
msgstr "（numpy 数组或 Taichi 张量）包含图像的张量，请参见下面的注释"

#: ../../gui.rst:58
msgid "Set an image to display on the window."
msgstr "设置要在窗口上显示的图像。"

#: ../../gui.rst:60
msgid ""
"The image pixels are set from the values of ``img[i, j]``, where ``i`` "
"indicates the horizontal coordinates (from left to right) and ``j`` the "
"vertical coordinates (from bottom to top)."
msgstr "图像像素由 ``img[i, j]`` 的值设定，其中 ``i`` 表示水平坐标（从左到右）， ``j`` 表示垂直坐标（从下到上） 。"

#: ../../gui.rst:63
msgid "If the window size is ``(x, y)``, then ``img`` must be one of:"
msgstr "如果窗口大小是 ``(x, y)`` ，则 ``img`` 必须是以下之一："

#: ../../gui.rst:65
#, fuzzy
msgid "``ti.field(shape=(x, y))``, a grey-scale image"
msgstr "``ti.var(shape=(x, y))`` ，灰度图像"

#: ../../gui.rst:67
#, fuzzy
msgid "``ti.field(shape=(x, y, 3))``, where `3` is for ``(r, g, b)`` channels"
msgstr "``ti.var(shape=(x, y, 3))`` ，其中 `3` 代表 ``(r, g, b)`` 通道"

#: ../../gui.rst:69
#, fuzzy
msgid "``ti.field(shape=(x, y, 2))``, where `2` is for ``(r, g)`` channels"
msgstr "``ti.var(shape=(x, y, 3))`` ，其中 `3` 代表 ``(r, g, b)`` 通道"

#: ../../gui.rst:71
#, fuzzy
msgid ""
"``ti.Vector.field(3, shape=(x, y))`` ``(r, g, b)`` channels on each "
"component (see :ref:`vector`)"
msgstr "``ti.Vector(3, shape=(x, y))`` （参见 :ref:`vector`）"

#: ../../gui.rst:73
#, fuzzy
msgid "``ti.Vector.field(2, shape=(x, y))`` ``(r, g)`` channels on each component"
msgstr "``ti.var(shape=(x, y, 3))`` ，其中 `3` 代表 ``(r, g, b)`` 通道"

#: ../../gui.rst:75
msgid "``np.ndarray(shape=(x, y))``"
msgstr "``np.ndarray(shape=(x, y))``"

#: ../../gui.rst:77
msgid "``np.ndarray(shape=(x, y, 3))``"
msgstr "``np.ndarray(shape=(x, y, 3))``"

#: ../../gui.rst:79
#, fuzzy
msgid "``np.ndarray(shape=(x, y, 2))``"
msgstr "``np.ndarray(shape=(x, y, 3))``"

#: ../../gui.rst:82
msgid "The data type of ``img`` must be one of:"
msgstr "``img`` 的数据类型必须是以下之一："

#: ../../gui.rst:84
msgid "``uint8``, range ``[0, 255]``"
msgstr "``uint8``，范围 ``[0, 255]``"

#: ../../gui.rst:86
msgid "``uint16``, range ``[0, 65535]``"
msgstr "``uint16``，范围 ``[0, 65535]``"

#: ../../gui.rst:88
msgid "``uint32``, range ``[0, 4294967295]``"
msgstr "``uint32``，范围 ``[0, 4294967295]``"

#: ../../gui.rst:90
msgid "``float32``, range ``[0, 1]``"
msgstr "``float32``，范围 ``[0, 1]``"

#: ../../gui.rst:92
msgid "``float64``, range ``[0, 1]``"
msgstr "``float64``，范围 ``[0, 1]``"

#: ../../gui.rst:96
msgid ""
"When using ``float32`` or ``float64`` as the data type, ``img`` entries "
"will be clipped into range ``[0, 1]`` for display."
msgstr ""
"当使用 ``float32`` 或 ``float64`` 作为数据类型时，``img`` 中的每个元素都将被裁剪为 ``[0, 1]`` "
"范围以便展示。"

#: ../../gui.rst:102
msgid "(np.array) the current image shown on the GUI"
msgstr ""

#: ../../gui.rst:104
msgid "Get the 4-channel (RGBA) image shown in the current GUI system."
msgstr ""

#: ../../gui.rst:110
msgid "(tuple of 2) the position of the circle"
msgstr "（2元组）圆的位置"

#: ../../gui.rst:111
msgid "(optional, RGB hex) the color to fill the circle"
msgstr "（可选，RGB十六进制）颜色填充圆圈"

#: ../../gui.rst:112
msgid "(optional, scalar) the radius of the circle"
msgstr "（可选，标量）圆的半径"

#: ../../gui.rst:114
msgid "Draw a solid circle."
msgstr "画一个实心圆。"

#: ../../gui.rst:120
msgid "(np.array) the positions of the circles"
msgstr "（numpy 数组）一系列圆的位置"

#: ../../gui.rst:121
msgid "(optional, RGB hex or np.array of uint32) the color(s) to fill the circles"
msgstr "（可选，RGB十六进制或 uint32 的 numpy 数组）填充圆的颜色"

#: ../../gui.rst:122
msgid ""
"(optional, scalar or np.array of float32) the radius (radii) of the "
"circles"
msgstr "（可选，float32的标量或np.array）圆的半径"

#: ../../gui.rst:124
msgid "Draw solid circles."
msgstr "画多个实心圆。"

#: ../../gui.rst:128
msgid ""
"If ``color`` is a numpy array, the circle at ``pos[i]`` will be colored "
"with ``color[i]``. In this case, ``color`` must have the same size as "
"``pos``."
msgstr ""
"如果 ``color`` 是一个 numpy 数组，则位于 ``pos[i]`` 的圆圈将使用 ``color[i]`` 作为颜色，因此 "
"``color`` 的数组长度必须与 ``pos`` 相同。"

#: ../../gui.rst:135
msgid "(tuple of 2) the first end point position of line"
msgstr "（2元组）直线的第一个端点位置"

#: ../../gui.rst:136
msgid "(tuple of 2) the second end point position of line"
msgstr "（2元组）直线的第二个端点位置"

#: ../../gui.rst:137
msgid "(optional, RGB hex) the color of line"
msgstr "（可选，RGB十六进制）线条颜色"

#: ../../gui.rst:138
msgid "(optional, scalar) the width of line"
msgstr "（可选，标量）线的宽度"

#: ../../gui.rst:140
msgid "Draw a line."
msgstr "画一条线。"

#: ../../gui.rst:146
msgid "(np.array) the positions of the first end point of lines"
msgstr "（numpy 数组）直线的第一个端点位置组成的数组"

#: ../../gui.rst:147
msgid "(np.array) the positions of the second end point of lines"
msgstr "（numpy 数组）直线的第二个端点位置组成的数组"

#: ../../gui.rst:148
msgid "(optional, RGB hex or np.array of uint32) the color(s) of lines"
msgstr "（可选，RGB十六进制或 uint32 的 numpy 数组）填充直线的颜色"

#: ../../gui.rst:149
msgid "(optional, scalar or np.array of float32) the width(s) of the lines"
msgstr "（可选，float32的标量或np.array）线的宽度"

#: ../../gui.rst:151
msgid "Draw lines."
msgstr "画多条线。"

#: ../../gui.rst:157
msgid "(tuple of 2) the first end point position of triangle"
msgstr "（2元组）三角形的第一个端点位置"

#: ../../gui.rst:158
msgid "(tuple of 2) the second end point position of triangle"
msgstr "（2元组）三角形的第二个端点位置"

#: ../../gui.rst:159
msgid "(tuple of 2) the third end point position of triangle"
msgstr "（2元组）三角形的第三个端点位置"

#: ../../gui.rst:160
msgid "(optional, RGB hex) the color to fill the triangle"
msgstr "（可选，RGB十六进制）填充三角形的颜色"

#: ../../gui.rst:162
msgid "Draw a solid triangle."
msgstr "画一个实心三角形。"

#: ../../gui.rst:168
msgid "(np.array) the positions of the first end point of triangles"
msgstr "（numpy 数组）三角形中所有第一个顶点的位置组成的数组"

#: ../../gui.rst:169
msgid "(np.array) the positions of the second end point of triangles"
msgstr "（numpy 数组）三角形中所有第二个顶点的位置组成的数组"

#: ../../gui.rst:170
msgid "(np.array) the positions of the third end point of triangles"
msgstr "（numpy 数组）三角形中所有第三个顶点的位置组成的数组"

#: ../../gui.rst:171
msgid ""
"(optional, RGB hex or np.array of uint32) the color(s) to fill the "
"triangles"
msgstr "（可选，RGB十六进制或 uint32 的 numpy 数组）填充三角形的颜色"

#: ../../gui.rst:173
msgid "Draw solid triangles."
msgstr "画一个实心三角形。"

#: ../../gui.rst:179
msgid "(tuple of 2) the top-left point position of rectangle"
msgstr "（2元组）矩形的左上角位置"

#: ../../gui.rst:180
msgid "(tuple of 2) the bottom-right point position of rectangle"
msgstr "（2元组）矩形的右下角位置"

#: ../../gui.rst:181
msgid "(optional, RGB hex) the color of stroke line"
msgstr "（可选，RGB十六进制）描边线的颜色"

#: ../../gui.rst:182
msgid "(optional, scalar) the width of stroke line"
msgstr "（可选，标量）描边线的宽度"

#: ../../gui.rst:184
msgid "Draw a hollow rectangle."
msgstr "画一个空心的矩形。"

#: ../../gui.rst:190
msgid "(str) the text to draw"
msgstr "（字符串）需要绘制的文字"

#: ../../gui.rst:191
msgid "(tuple of 2) the top-left point position of the fonts / texts"
msgstr "（2元组）字体 / 文字的左上角位置"

#: ../../gui.rst:192
msgid "(optional, scalar) the size of font (in height)"
msgstr "（可选，标量）字体的大小（以高度计）"

#: ../../gui.rst:193
msgid "(optional, RGB hex) the foreground color of text"
msgstr "（可选，RGB十六进制）字体的前景颜色"

#: ../../gui.rst:195
msgid "Draw a line of text on screen."
msgstr "在屏幕上画文字。"

#: ../../gui.rst:200
msgid "(tuple of 3 floats) The (R, G, B) float values, in range [0, 1]"
msgstr "(3个浮点数组成的元组) (R, G, B) 浮点数值, 在区间 [0, 1]"

#: ../../gui.rst:201
msgid "(RGB hex or np.array of uint32) The converted hex value"
msgstr "（可选，RGB十六进制或 uint32 的 numpy 数组）转换后的十六进制颜色"

#: ../../gui.rst:203
msgid "Convert a (R, G, B) tuple of floats into a single integer value. E.g.,"
msgstr "把 (R, G, B) 的浮点数组转换成单个整数值，例如,"

#: ../../gui.rst:205
msgid ""
"rgb = (0.4, 0.8, 1.0)\n"
"hex = ti.rgb_to_hex(rgb)  # 0x66ccff\n"
"\n"
"rgb = np.array([[0.4, 0.8, 1.0], [0.0, 0.5, 1.0]])\n"
"hex = ti.rgb_to_hex(rgb)  # np.array([0x66ccff, 0x007fff])"
msgstr ""
"rgb = (0.4, 0.8, 1.0)\n"
"hex = ti.rgb_to_hex(rgb)  # 0x66ccff\n"
"\n"
"rgb = np.array([[0.4, 0.8, 1.0], [0.0, 0.5, 1.0]])\n"
"hex = ti.rgb_to_hex(rgb)  # np.array([0x66ccff, 0x007fff])"

#: ../../gui.rst:213
msgid "The return values can be used in GUI drawing APIs."
msgstr "返回值可以用于其他 GUI 的绘图 API。"

#: ../../gui.rst:219
msgid "Event processing"
msgstr "事件处理"

#: ../../gui.rst:221
msgid "Every event have a key and type."
msgstr "每个事件都有个 key 和 type。"

#: ../../gui.rst:223
msgid ""
"*Event type* is the type of event, for now, there are just three type of "
"event:"
msgstr "``type`` 是事件的类型，目前只有三种类型的事件："

#: ../../gui.rst:227
msgid ""
"ti.GUI.RELEASE  # key up or mouse button up\n"
"ti.GUI.PRESS    # key down or mouse button down\n"
"ti.GUI.MOTION   # mouse motion or mouse wheel"
msgstr ""
"ti.GUI.RELEASE  # 键盘或鼠标被放开\n"
"ti.GUI.PRESS    # 键盘或鼠标被按下\n"
"ti.GUI.MOTION   # 鼠标移动或鼠标滚轮"

#: ../../gui.rst:231
msgid ""
"*Event key* is the key that you pressed on keyboard or mouse, can be one "
"of:"
msgstr "*事件的 ``key``* 是你在键盘或鼠标上按下的按钮，可以是以下之一："

#: ../../gui.rst:235
msgid ""
"# for ti.GUI.PRESS and ti.GUI.RELEASE event:\n"
"ti.GUI.ESCAPE  # Esc\n"
"ti.GUI.SHIFT   # Shift\n"
"ti.GUI.LEFT    # Left Arrow\n"
"'a'            # we use lowercase for alphabet\n"
"'b'\n"
"...\n"
"ti.GUI.LMB     # Left Mouse Button\n"
"ti.GUI.RMB     # Right Mouse Button\n"
"\n"
"# for ti.GUI.MOTION event:\n"
"ti.GUI.MOVE    # Mouse Moved\n"
"ti.GUI.WHEEL   # Mouse Wheel Scrolling"
msgstr ""
"# for ti.GUI.PRESS and ti.GUI.RELEASE event:\n"
"ti.GUI.ESCAPE  # Esc\n"
"ti.GUI.SHIFT   # Shift\n"
"ti.GUI.LEFT    # Left Arrow\n"
"'a'            # we use lowercase for alphabet\n"
"'b'\n"
"...\n"
"ti.GUI.LMB     # Left Mouse Button\n"
"ti.GUI.RMB     # Right Mouse Button\n"
"\n"
"# for ti.GUI.MOTION event:\n"
"ti.GUI.MOVE    # Mouse Moved\n"
"ti.GUI.WHEEL   # Mouse Wheel Scrolling"

#: ../../gui.rst:249
msgid ""
"A *event filter* is a list combined of *key*, *type* and *(type, key)* "
"tuple, e.g.:"
msgstr "*事件过滤器* 是一个由 ``key``，``type`` 和 ``(type, key)`` 元组组成的列表，例如："

#: ../../gui.rst:251
msgid ""
"# if ESC pressed or released:\n"
"gui.get_event(ti.GUI.ESCAPE)\n"
"\n"
"# if any key is pressed:\n"
"gui.get_event(ti.GUI.PRESS)\n"
"\n"
"# if ESC pressed or SPACE released:\n"
"gui.get_event((ti.GUI.PRESS, ti.GUI.ESCAPE), (ti.GUI.RELEASE, "
"ti.GUI.SPACE))"
msgstr ""
"# 如果按下或释放ESC:\n"
"gui.get_event(ti.GUI.ESCAPE)\n"
"\n"
"# 如果按下任何键:\n"
"gui.get_event(ti.GUI.PRESS)\n"
"\n"
"# 如果按ESC或释放SPACE:\n"
"gui.get_event((ti.GUI.PRESS, ti.GUI.ESCAPE), (ti.GUI.RELEASE, "
"ti.GUI.SPACE))"

#: ../../gui.rst:265 ../../gui.rst:296 ../../gui.rst:322 ../../gui.rst:341
#: ../../gui.rst:362 ../../gui.rst:374
msgid "(GUI)"
msgstr "（GUI）"

#: ../../gui.rst:266
msgid "(bool) ``True`` if ``ti.GUI.EXIT`` event occurred, vice versa"
msgstr "(bool) 若 ``ti.GUI.EXIT`` 事件发生，返回 ``True``，反之亦然"

#: ../../gui.rst:268
msgid ""
"``ti.GUI.EXIT`` occurs when you click on the close (X) button of a "
"window. So ``gui.running`` will obtain ``False`` when the GUI is being "
"closed."
msgstr ""
"当你点击一个窗口的关闭 (X) 按钮时，就会发生 ``ti.GUI.EXIT`` 。所以当窗口关闭的时候，查询 ``gui.running`` "
"会得到 ``False``。"

#: ../../gui.rst:271
msgid "For example, loop until the close button is clicked:"
msgstr "例如，循环直到按下窗口的关闭按钮："

#: ../../gui.rst:275
msgid ""
"while gui.running:\n"
"    render()\n"
"    gui.set_image(pixels)\n"
"    gui.show()"
msgstr ""
"while gui.running:\n"
"    render()\n"
"    gui.set_image(pixels)\n"
"    gui.show()"

#: ../../gui.rst:281
msgid ""
"You can also close the window by manually setting ``gui.running`` to "
"``False``:"
msgstr "你也可以通过手动把 ``gui.running`` 设为 ``False`` 来关闭窗口:"

#: ../../gui.rst:285
msgid ""
"while gui.running:\n"
"    if gui.get_event(ti.GUI.ESCAPE):\n"
"        gui.running = False\n"
"\n"
"    render()\n"
"    gui.set_image(pixels)\n"
"    gui.show()"
msgstr ""
"while gui.running:\n"
"    if gui.get_event(ti.GUI.ESCAPE):\n"
"        gui.running = False\n"
"\n"
"    render()\n"
"    gui.set_image(pixels)\n"
"    gui.show()"

#: ../../gui.rst:297 ../../gui.rst:323
msgid "(optional, EventFilter) filter out matched events"
msgstr "（可选，事件过滤器）过滤掉匹配的事件"

#: ../../gui.rst:298
msgid "(bool) ``False`` if there is no pending event, vise versa"
msgstr "(bool) 如果没有待处理的事件，返回 ``False``，反之亦然"

#: ../../gui.rst:300
msgid "Try to pop a event from the queue, and store it in ``gui.event``."
msgstr "尝试从队列中弹出事件，并将其存储在 ``gui.event`` 中。"

#: ../../gui.rst:302 ../../gui.rst:365
msgid "For example:"
msgstr "例如："

#: ../../gui.rst:306
msgid ""
"if gui.get_event():\n"
"    print('Got event, key =', gui.event.key)"
msgstr ""
"if gui.get_event():\n"
"    print('Got event, key =', gui.event.key)"

#: ../../gui.rst:310
msgid "For example, loop until ESC is pressed:"
msgstr "例如，循环直到按下ESC："

#: ../../gui.rst:314
msgid ""
"gui = ti.GUI('Title', (640, 480))\n"
"while not gui.get_event(ti.GUI.ESCAPE):\n"
"    gui.set_image(img)\n"
"    gui.show()"
msgstr ""
"gui = ti.GUI('Title', (640, 480))\n"
"while not gui.get_event(ti.GUI.ESCAPE):\n"
"    gui.set_image(img)\n"
"    gui.show()"

#: ../../gui.rst:324
msgid "(generator) a python generator, see below"
msgstr "（生成器）python生成器，请参见下文"

#: ../../gui.rst:326
msgid ""
"Basically the same as ``gui.get_event``, except for this one returns a "
"generator of events instead of storing into ``gui.event``:"
msgstr "基本上与 ``gui.get_event`` 相同，只不过它返回一个事件生成器，而不是存储到 ``gui.event`` 中："

#: ../../gui.rst:330
msgid ""
"for e in gui.get_events():\n"
"    if e.key == ti.GUI.ESCAPE:\n"
"        exit()\n"
"    elif e.key == ti.GUI.SPACE:\n"
"        do_something()\n"
"    elif e.key in ['a', ti.GUI.LEFT]:\n"
"        ..."
msgstr ""
"for e in gui.get_events():\n"
"    if e.key == ti.GUI.ESCAPE:\n"
"        exit()\n"
"    elif e.key == ti.GUI.SPACE:\n"
"        do_something()\n"
"    elif e.key in ['a', ti.GUI.LEFT]:\n"
"        ..."

#: ../../gui.rst:342
msgid "(EventKey) keys you want to detect"
msgstr "(事件的 key) 您要检测的键"

#: ../../gui.rst:343
msgid "(bool) ``True`` if one of the keys pressed, vice versa"
msgstr "(bool) 其中一个键处于按下状态，返回 ``True``，反之亦然"

#: ../../gui.rst:347
msgid ""
"Must be used together with ``gui.get_event``, or it won't be updated! For"
" example:"
msgstr "必须与 ``gui.get_event`` 一起使用，否则将不会更新！ 例如："

#: ../../gui.rst:352
msgid ""
"while True:\n"
"    gui.get_event()  # must be called before is_pressed\n"
"    if gui.is_pressed('a', ti.GUI.LEFT):\n"
"        print('Go left!')\n"
"    elif gui.is_pressed('d', ti.GUI.RIGHT):\n"
"        print('Go right!')"
msgstr ""
"while True:\n"
"    gui.get_event()  # must be called before is_pressed\n"
"    if gui.is_pressed('a', ti.GUI.LEFT):\n"
"        print('Go left!')\n"
"    elif gui.is_pressed('d', ti.GUI.RIGHT):\n"
"        print('Go right!')"

#: ../../gui.rst:363
msgid "(tuple of 2) current cursor position within the window"
msgstr "（2元组）窗口中的当前光标位置"

#: ../../gui.rst:369
msgid "mouse_x, mouse_y = gui.get_cursor_pos()"
msgstr "mouse_x, mouse_y = gui.get_cursor_pos()"

#: ../../gui.rst:375
msgid "(scalar or None) the maximum FPS, ``None`` for no limit"
msgstr ""

#: ../../gui.rst:377
msgid "The default value is 60."
msgstr ""

#: ../../gui.rst:379
msgid ""
"For example, to restrict FPS to be below 24, simply ``gui.fps_limit = "
"24``. This helps reduce the overload on your hardware especially when "
"you're using OpenGL on your intergrated GPU which could make desktop slow"
" to response."
msgstr ""

#: ../../gui.rst:386
msgid "GUI Widgets"
msgstr "GUI 控件"

#: ../../gui.rst:388
msgid ""
"Sometimes it's more intuitive to use widgets like slider, button to "
"control program variables instead of chaotic keyboard bindings. Taichi "
"GUI provides a set of widgets that hopefully could make variable control "
"more intuitive:"
msgstr ""
"比起混乱的键位设定，有时使用一些控件比如滑块、按钮，去控制程序变量是十分直观的。Taichi 的 GUI "
"就提供一系列控件，希望能帮到你直观地控制变量："

#: ../../gui.rst:395
msgid "(str) the text to be displayed above this slider."
msgstr "（字符串）要在滑块里展示的文字"

#: ../../gui.rst:396
msgid "(float) the minimum value of the slider value."
msgstr "（浮点数）滑块的最小数值"

#: ../../gui.rst:397
msgid "(float) the maximum value of the slider value."
msgstr "（浮点数）滑块的最大数值"

#: ../../gui.rst:398
msgid "(optional, float) the step between two separate value."
msgstr "（可选，浮点数）每个滑块数值之间的差距/步长"

#: ../../gui.rst:400 ../../gui.rst:409
msgid "(WidgetValue) a value getter / setter, see :class:`WidgetValue`."
msgstr "(WidgetValue) 一个数值 getter / setter, 见 :class:`WidgetValue` 。"

#: ../../gui.rst:402
msgid ""
"The widget will be display as: ``{text}: {value:.3f}``, followed with a "
"slider."
msgstr ""

#: ../../gui.rst:407
msgid "(str) the text to be displayed in the label."
msgstr ""

#: ../../gui.rst:411
msgid "The widget will be display as: ``{text}: {value:.3f}``."
msgstr ""

#: ../../gui.rst:416
msgid "(str) the text to be displayed in the button."
msgstr "（字符串）要在按钮里展示的文字."

#: ../../gui.rst:417
msgid "(optional, str) customize the event name."
msgstr ""

#: ../../gui.rst:419
msgid "(EventKey) the event key for this button, see :ref:`gui_event`."
msgstr ""

#: ../../gui.rst:424
msgid "A getter / setter for widget values."
msgstr ""

#: ../../gui.rst:428
msgid "Get / set the current value in the widget where we're returned from."
msgstr ""

#: ../../gui.rst:430
msgid "For example::"
msgstr "例如：::"

#: ../../gui.rst:432
msgid ""
"radius = gui.slider('Radius', 1, 50)\n"
"\n"
"while gui.running:\n"
"    print('The radius now is', radius.value)\n"
"    ...\n"
"    radius.value += 0.01\n"
"    ...\n"
"    gui.show()"
msgstr ""

#: ../../gui.rst:442
msgid "Image I/O"
msgstr "图片输入/输出"

#: ../../gui.rst:446
msgid "(ti.Vector.field or ti.field) the image you want to export"
msgstr ""

#: ../../gui.rst:447
msgid "(string) the location you want to save to"
msgstr ""

#: ../../gui.rst:449
msgid ""
"Export a ``np.ndarray`` or Taichi field (``ti.Matrix.field``, "
"``ti.Vector.field``, or ``ti.field``) to a specified location "
"``filename``."
msgstr ""

#: ../../gui.rst:451
msgid ""
"Same as ``ti.GUI.show(filename)``, the format of the exported image is "
"determined by **the suffix of** ``filename`` as well. Now ``ti.imwrite`` "
"supports exporting images to ``png``, ``img`` and ``jpg`` and we "
"recommend using ``png``."
msgstr ""

#: ../../gui.rst:453
msgid ""
"Please make sure that the input image has **a valid shape**. If you want "
"to export a grayscale image, the input shape of field should be "
"``(height, weight)`` or ``(height, weight, 1)``. For example:"
msgstr ""

#: ../../gui.rst:455
#, fuzzy
msgid ""
"import taichi as ti\n"
"\n"
"ti.init()\n"
"\n"
"shape = (512, 512)\n"
"type = ti.u8\n"
"pixels = ti.field(dtype=type, shape=shape)\n"
"\n"
"@ti.kernel\n"
"def draw():\n"
"    for i, j in pixels:\n"
"        pixels[i, j] = ti.random() * 255    # integars between [0, 255] "
"for ti.u8\n"
"\n"
"draw()\n"
"\n"
"ti.imwrite(pixels, f\"export_u8.png\")"
msgstr ""
"import taichi as ti\n"
"\n"
"ti.init()\n"
"\n"
"shape = (512, 512)\n"
"channels = 3\n"
"type = ti.f32\n"
"pixels = ti.Matrix(channels, dt=type, shape=shape)\n"
"\n"
"@ti.kernel\n"
"def draw():\n"
"    for i, j in pixels:\n"
"        for k in ti.static(range(channels)):\n"
"            pixels[i, j][k] = ti.random()   # floats between [0, 1] for "
"ti.f32\n"
"\n"
"draw()\n"
"\n"
"ti.imwrite(pixels, f\"export_f32.png\")"

#: ../../gui.rst:474
msgid ""
"Besides, for RGB or RGBA images, ``ti.imwrite`` needs to receive a field "
"which has shape ``(height, width, 3)`` and ``(height, width, 4)`` "
"individually."
msgstr ""

#: ../../gui.rst:476
msgid ""
"Generally the value of the pixels on each channel of a ``png`` image is "
"an integar in [0, 255]. For this reason, ``ti.imwrite`` will **cast "
"fields** which has different datatypes all **into integars between [0, "
"255]**. As a result, ``ti.imwrite`` has the following requirements for "
"different datatypes of input fields:"
msgstr ""

#: ../../gui.rst:478
msgid ""
"For float-type (``ti.f16``, ``ti.f32``, etc) input fields, **the value of"
" each pixel should be float between [0.0, 1.0]**. Otherwise "
"``ti.imwrite`` will first clip them into [0.0, 1.0]. Then they are "
"multiplied by 256 and casted to integaters ranging from [0, 255]."
msgstr ""

#: ../../gui.rst:480
msgid ""
"For int-type (``ti.u8``, ``ti.u16``, etc) input fields, **the value of "
"each pixel can be any valid integer in its own bounds**. These integers "
"in this field will be scaled to [0, 255] by being divided over the upper "
"bound of its basic type accordingly."
msgstr ""

#: ../../gui.rst:482
msgid "Here is another example:"
msgstr "这里是另一个例子："

#: ../../gui.rst:484
#, fuzzy
msgid ""
"import taichi as ti\n"
"\n"
"ti.init()\n"
"\n"
"shape = (512, 512)\n"
"channels = 3\n"
"type = ti.f32\n"
"pixels = ti.Matrix.field(channels, dtype=type, shape=shape)\n"
"\n"
"@ti.kernel\n"
"def draw():\n"
"    for i, j in pixels:\n"
"        for k in ti.static(range(channels)):\n"
"            pixels[i, j][k] = ti.random()   # floats between [0, 1] for "
"ti.f32\n"
"\n"
"draw()\n"
"\n"
"ti.imwrite(pixels, f\"export_f32.png\")"
msgstr ""
"import taichi as ti\n"
"\n"
"ti.init()\n"
"\n"
"shape = (512, 512)\n"
"channels = 3\n"
"type = ti.f32\n"
"pixels = ti.Matrix(channels, dt=type, shape=shape)\n"
"\n"
"@ti.kernel\n"
"def draw():\n"
"    for i, j in pixels:\n"
"        for k in ti.static(range(channels)):\n"
"            pixels[i, j][k] = ti.random()   # floats between [0, 1] for "
"ti.f32\n"
"\n"
"draw()\n"
"\n"
"ti.imwrite(pixels, f\"export_f32.png\")"

#: ../../gui.rst:508
msgid "(string) the filename of the image to load"
msgstr "（字符串）要加载的图像文件名"

#: ../../gui.rst:509
msgid ""
"(optional int) the number of channels in your specified image. The "
"default value ``0`` means the channels of the returned image is adaptive "
"to the image file"
msgstr ""

#: ../../gui.rst:511
msgid "(np.ndarray) the image read from ``filename``"
msgstr ""

#: ../../gui.rst:513
msgid ""
"This function loads an image from the target filename and returns it as a"
" ``np.ndarray(dtype=np.uint8)``."
msgstr ""

#: ../../gui.rst:515
msgid "Each value in this returned field is an integer in [0, 255]."
msgstr ""

#: ../../gui.rst:519
msgid "(ti.Vector.field or ti.field) the image to show in the GUI"
msgstr ""

#: ../../gui.rst:520
msgid "(string) the name of the GUI window"
msgstr "（字符串）窗口标题"

#: ../../gui.rst:522
msgid ""
"This function will create an instance of ``ti.GUI`` and show the input "
"image on the screen."
msgstr ""

#: ../../gui.rst:524
msgid "It has the same logic as ``ti.imwrite`` for different datatypes."
msgstr ""

#~ msgid "This creates a window whose width is 1024, height is 768:"
#~ msgstr "这将创建一个宽度为1024，高度为768的窗口："

#~ msgid ""
#~ "The pixel, ``i`` from bottom to "
#~ "up, ``j`` from left to right, is"
#~ " set to the value of ``img[i, "
#~ "j]``."
#~ msgstr "从下到上第 ``i`` 个，从左到右第 ``j`` 个像素，显示的是 ``img[i, j]`` 的值。"

#~ msgid "uint32, range [0, UINT_MAX]"
#~ msgstr "uint32，范围 [0, UINT_MAX]"

#~ msgid ""
#~ "ti.GUI.ESCAPE\n"
#~ "ti.GUI.SHIFT\n"
#~ "ti.GUI.LEFT\n"
#~ "'a'\n"
#~ "'b'\n"
#~ "...\n"
#~ "ti.GUI.LMB\n"
#~ "ti.GUI.RMB"
#~ msgstr ""
#~ "ti.GUI.ESCAPE\n"
#~ "ti.GUI.SHIFT\n"
#~ "ti.GUI.LEFT\n"
#~ "'a'\n"
#~ "'b'\n"
#~ "...\n"
#~ "ti.GUI.LMB\n"
#~ "ti.GUI.RMB"

#~ msgid ""
#~ "img = ti.imread('hello.png')\n"
#~ "ti.imshow(img, 'Window Title')\n"
#~ "ti.imwrite(img, 'hello2.png')"
#~ msgstr ""
#~ "img = ti.imread('hello.png')\n"
#~ "ti.imshow(img, 'Window Title')\n"
#~ "ti.imwrite(img, 'hello2.png')"

#~ msgid "TODO: complete here"
#~ msgstr "TODO：在这里完成"

#~ msgid ""
#~ "ti.GUI.RELEASE  # key up\n"
#~ "ti.GUI.PRESS    # key down\n"
#~ "ti.GUI.MOTION   # mouse moved"
#~ msgstr ""
#~ "ti.GUI.RELEASE  # 松开键\n"
#~ "ti.GUI.PRESS   # 按下键\n"
#~ "ti.GUI.MOTION   #鼠标移动"

#~ msgid "a ``np.ndarray`` which is the current image shown on the GUI."
#~ msgstr ""

#~ msgid ""
#~ "Get the RGBA shown image from the"
#~ " current GUI system which has four"
#~ " channels."
#~ msgstr ""

#~ msgid "(Matrix or Expr) the image you want to export"
#~ msgstr ""

#~ msgid ""
#~ "Export a ``np.ndarray`` or Taichi tensor"
#~ " (``ti.Matrix``, ``ti.Vector``, or ``ti.var``)"
#~ " to a specified location ``filename``."
#~ msgstr ""

#~ msgid ""
#~ "Please make sure that the input "
#~ "image has **a valid shape**. If "
#~ "you want to export a grayscale "
#~ "image, the input shape of tensor "
#~ "should be ``(height, weight)`` or "
#~ "``(height, weight, 1)``. For example:"
#~ msgstr ""

#~ msgid ""
#~ "import taichi as ti\n"
#~ "\n"
#~ "ti.init()\n"
#~ "\n"
#~ "shape = (512, 512)\n"
#~ "type = ti.u8\n"
#~ "pixels = ti.var(dt=type, shape=shape)\n"
#~ "\n"
#~ "@ti.kernel\n"
#~ "def draw():\n"
#~ "    for i, j in pixels:\n"
#~ "        pixels[i, j] = ti.random() * "
#~ "255    # integars between [0, 255] "
#~ "for ti.u8\n"
#~ "\n"
#~ "draw()\n"
#~ "\n"
#~ "ti.imwrite(pixels, f\"export_u8.png\")"
#~ msgstr ""

#~ msgid ""
#~ "Besides, for RGB or RGBA images, "
#~ "``ti.imwrite`` needs to receive a tensor"
#~ " which has shape ``(height, width, "
#~ "3)`` and ``(height, width, 4)`` "
#~ "individually."
#~ msgstr ""

#~ msgid ""
#~ "Generally the value of the pixels "
#~ "on each channel of a ``png`` image"
#~ " is an integar in [0, 255]. For"
#~ " this reason, ``ti.imwrite`` will **cast"
#~ " tensors** which has different datatypes"
#~ " all **into integars between [0, "
#~ "255]**. As a result, ``ti.imwrite`` has"
#~ " the following requirements for different"
#~ " datatypes of input tensors:"
#~ msgstr ""

#~ msgid ""
#~ "For float-type (``ti.f16``, ``ti.f32``, "
#~ "etc) input tensors, **the value of "
#~ "each pixel should be float between "
#~ "[0.0, 1.0]**. Otherwise ``ti.imwrite`` will"
#~ " first clip them into [0.0, 1.0]. "
#~ "Then they are multiplied by 256 "
#~ "and casted to integaters ranging from"
#~ " [0, 255]."
#~ msgstr ""

#~ msgid ""
#~ "For int-type (``ti.u8``, ``ti.u16``, "
#~ "etc) input tensors, **the value of "
#~ "each pixel can be any valid "
#~ "integer in its own bounds**. These "
#~ "integers in this tensor will be "
#~ "scaled to [0, 255] by being "
#~ "divided over the upper bound of "
#~ "its basic type accordingly."
#~ msgstr ""

#~ msgid "Each value in this returned tensor is an integer in [0, 255]."
#~ msgstr ""

#~ msgid "(Matrix or Expr) the image to show in the GUI"
#~ msgstr ""

